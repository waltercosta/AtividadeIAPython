# -*- coding: utf-8 -*-
"""Processamento de linguagem natural.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/187vmbr9AyHtDJqd6vxQooxL6ZxGZuS_R
"""

#Importando dados do google drive
from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')

#Importando a biblioteca NLTK
import nltk
nltk.download()

import pandas as pd
base = pd.read_csv('./drive/My Drive/Colab Notebooks/Sentiment.csv', sep = ',')
#base.head()
print(base.columns)

import numpy as np
basef = pd.read_csv('./drive/My Drive/Colab Notebooks/Sentiment.csv', sep = ',')#nrows seleciona uma quantidade de tuplas espec√≠fica
basef.head()

#remove valores NaN
basef.dropna(inplace=True)

previsor = base['text']
classe = base['sentiment']
print(previsor.shape)
print(classe.shape)

import re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from sklearn.model_selection import cross_val_predict

vetor_palavras = CountVectorizer(analyzer="word")
frequencia_palavra = vetor_palavras.fit_transform(previsor)
#Criando um modelo Naive Bayes Multinomial
modelo = MultinomialNB()
modelo.fit(frequencia_palavra, classe)

teste = ["Many great businesses use the bankruptcy laws. Trump did what a lot of businesses have done.",
        "What were the hardest-hitting questions in the Debate?",
        "Thanks Fox News, you're raising Donald Trump's ratings.",
        "Can you answer this very direct question? I should be president. So, no?"]
freq_teste = vetor_palavras.transform(teste)
modelo.predict(freq_teste)

resultados = cross_val_predict(modelo, frequencia_palavra, classe, cv = 10)
print(resultados)
metrics.accuracy_score(classe, resultados)
sentimentos = ["Positivo", "Negativo", "Neutro"]
print(metrics.classification_report(classe, resultados, sentimentos))

print(pd.crosstab(classe, resultados, rownames = ["Real"], colnames=["Preditor"], margins=True))